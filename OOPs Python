Object-oriented design facilitates reusable, robust, and adaptable software.
Of special relevance to this book is the con-
cept of a design pattern, which describes a solution to a “typical” software design
problem. A pattern provides a general template for a solution that can be applied in
many different situations.
It consists of a name,
which identifies the pattern; a context, which describes the scenarios for which this
pattern can be applied; a template, which describes how the pattern is applied; and
a result, which describes and analyzes what the pattern produces.
T

he algorithm design
patterns we discuss include the following:

Recursion (Chapter 4)
Amortization (Sections 5.3 and 11.4)
Divide-and-conquer (Section 12.2.1)
Prune-and-search, also known as decrease-and-conquer (Section 12.7.1)
Brute force (Section 13.2.1)
Dynamic programming (Section 13.3).
The greedy method (Sections 13.4.2, 14.6.2, and 14.7)
